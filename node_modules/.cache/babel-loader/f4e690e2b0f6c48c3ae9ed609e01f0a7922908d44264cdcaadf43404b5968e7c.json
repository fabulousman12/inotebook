{"ast":null,"code":"var _jsxFileName = \"D:\\\\learn-react-03\\\\inotebook\\\\src\\\\context\\\\notes\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport NoteContext from \"./NoteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const [notes, setNotes] = useState([]);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [name, setName] = useState(null);\n\n  // Check for token and set authentication state\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      setIsAuthenticated(true);\n      getuser(token); // Fetch user data if authenticated\n    }\n  }, []);\n\n  // Get notes\n  const getNote = async token => {\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Auth': token\n      }\n    });\n    const json = await response.json();\n    setNotes(json);\n  };\n\n  // Add a note\n  const addNote = async (title, description, tag) => {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Auth': token\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = await response.json();\n    setNotes(prevNotes => [...prevNotes, json]);\n  };\n\n  // Delete a note\n  const deleteNote = async id => {\n    const token = localStorage.getItem('token');\n    await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'Auth': token\n      }\n    });\n    setNotes(notes.filter(note => note._id !== id));\n  };\n\n  // Edit a note\n  const editNote = async (id, title, description, tag) => {\n    const token = localStorage.getItem('token');\n    const response = await fetch(`${host}/api/notes/updateNotes/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Auth': token\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = await response.json();\n\n    // Update the note in the local state\n    const newNotes = notes.map(note => note._id === id ? json : note);\n    setNotes(newNotes);\n  };\n\n  // Get user\n  const getuser = async token => {\n    const response = await fetch(`${host}/api/auth/getuser`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Auth': token\n      }\n    });\n    const json = await response.json();\n    setName(json.name);\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      getNote,\n      isAuthenticated,\n      getuser,\n      name,\n      setIsAuthenticated\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteState, \"dKuejhbLqvBzi4WZLO+sGy9+cpM=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["React","useState","useEffect","NoteContext","jsxDEV","_jsxDEV","NoteState","props","_s","host","notes","setNotes","isAuthenticated","setIsAuthenticated","name","setName","token","localStorage","getItem","getuser","getNote","response","fetch","method","headers","json","addNote","title","description","tag","body","JSON","stringify","prevNotes","deleteNote","id","filter","note","_id","editNote","newNotes","map","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/learn-react-03/inotebook/src/context/notes/NoteState.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport NoteContext from \"./NoteContext\";\r\n\r\nconst NoteState = (props) => {\r\n  const host = \"http://localhost:5000\";\r\n  const [notes, setNotes] = useState([]);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [name, setName] = useState(null);\r\n\r\n  // Check for token and set authentication state\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      setIsAuthenticated(true);\r\n      getuser(token); // Fetch user data if authenticated\r\n    }\r\n  }, []);\r\n\r\n  // Get notes\r\n  const getNote = async (token) => {\r\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Auth': token\r\n      }\r\n    });\r\n    const json = await response.json();\r\n    setNotes(json);\r\n  };\r\n\r\n  // Add a note\r\n  const addNote = async (title, description, tag) => {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${host}/api/notes/addnote`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Auth': token\r\n      },\r\n      body: JSON.stringify({ title, description, tag })\r\n    });\r\n    const json = await response.json();\r\n    setNotes((prevNotes) => [...prevNotes, json]);\r\n  };\r\n\r\n  // Delete a note\r\n  const deleteNote = async (id) => {\r\n    const token = localStorage.getItem('token');\r\n    await fetch(`${host}/api/notes/deletenote/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Auth': token\r\n      }\r\n    });\r\n    setNotes(notes.filter(note => note._id !== id));\r\n  };\r\n\r\n  // Edit a note\r\n  const editNote = async (id, title, description, tag) => {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch(`${host}/api/notes/updateNotes/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Auth': token\r\n      },\r\n      body: JSON.stringify({ title, description, tag })\r\n    });\r\n    const json = await response.json();\r\n\r\n    // Update the note in the local state\r\n    const newNotes = notes.map((note) => (note._id === id ? json : note));\r\n    setNotes(newNotes);\r\n  };\r\n\r\n  // Get user\r\n  const getuser = async (token) => {\r\n    const response = await fetch(`${host}/api/auth/getuser`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Auth': token\r\n      }\r\n    });\r\n    const json = await response.json();\r\n    setName(json.name);\r\n  };\r\n\r\n  return (\r\n    <NoteContext.Provider value={{ notes, addNote, deleteNote, editNote, getNote, isAuthenticated, getuser, name,setIsAuthenticated }}>\r\n      {props.children}\r\n    </NoteContext.Provider>\r\n  );\r\n};\r\n\r\nexport default NoteState;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}