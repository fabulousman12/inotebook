{"ast":null,"code":"var _jsxFileName = \"D:\\\\learn-react-03\\\\inotebook\\\\src\\\\context\\\\notes\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport NoteContext from \"./NoteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const auth = localStorage.getItem(\"token\");\n  const [notes, setNotes] = useState([]);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [name, setname] = useState(null);\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      setIsAuthenticated(true);\n    }\n  }, []);\n  // Get notes\n  const getNote = async () => {\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Auth': auth\n      }\n    });\n    const json = await response.json();\n    setNotes(json);\n  };\n\n  // Add a note\n  const addNote = async (title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Auth': auth\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = await response.json();\n    setNotes(prevNotes => [...prevNotes, json]);\n  };\n\n  // Delete a note\n  const deleteNote = async id => {\n    // Add API call to delete the note from the server\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'Auth': auth\n      }\n    });\n    const json = response.json();\n  };\n\n  // Edit a note\n  const editNote = async (id, title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/updateNotes/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Auth': auth\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = await response.json();\n\n    // Update the note in the local state\n    const newNotes = notes.map(note => note._id === id ? json : note);\n    setNotes(newNotes);\n  };\n  useEffect(() => {\n    getNote();\n  }, []);\n  const getuser = async () => {\n    const response = await fetch(`${host}/api/auth/getuser`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Auth': auth\n      }\n    });\n    const json = await response.json();\n    setname(json.name);\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      getNote,\n      isAuthenticated,\n      getuser,\n      name\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteState, \"DkH8g+e5G+ef+kc3yZMdQD62xVM=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["React","useState","useEffect","NoteContext","jsxDEV","_jsxDEV","NoteState","props","_s","host","auth","localStorage","getItem","notes","setNotes","isAuthenticated","setIsAuthenticated","name","setname","token","getNote","response","fetch","method","headers","json","addNote","title","description","tag","body","JSON","stringify","prevNotes","deleteNote","id","editNote","newNotes","map","note","_id","getuser","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/learn-react-03/inotebook/src/context/notes/NoteState.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport NoteContext from \"./NoteContext\";\r\n\r\nconst NoteState = (props) => {\r\n  const host = \"http://localhost:5000\";\r\n  const auth = localStorage.getItem(\"token\")\r\n  const [notes, setNotes] = useState([]);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [name,setname] = useState(null)\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      setIsAuthenticated(true);\r\n    }\r\n  }, []);\r\n  // Get notes\r\n  const getNote = async () => {\r\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Auth': auth\r\n      }\r\n    });\r\n    const json = await response.json();\r\n    setNotes(json);\r\n  };\r\n\r\n  // Add a note\r\n  const addNote = async (title, description, tag) => {\r\n    const response = await fetch(`${host}/api/notes/addnote`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Auth': auth\r\n      },\r\n      body: JSON.stringify({ title, description, tag })\r\n    });\r\n    const json = await response.json();\r\n    setNotes((prevNotes) => [...prevNotes, json]);\r\n  };\r\n\r\n  // Delete a note\r\n  const deleteNote = async (id) => {\r\n    // Add API call to delete the note from the server\r\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Auth': auth\r\n      }\r\n    });\r\n    const json = response.json();\r\n\r\n  };\r\n\r\n  // Edit a note\r\n  const editNote = async (id, title, description, tag) => {\r\n    const response = await fetch(`${host}/api/notes/updateNotes/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Auth': auth\r\n      },\r\n      body: JSON.stringify({ title, description, tag })\r\n    });\r\n    const json = await response.json();\r\n\r\n    // Update the note in the local state\r\n    const newNotes = notes.map((note) => (note._id === id ? json : note));\r\n    setNotes(newNotes);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getNote();\r\n  }, []);\r\n  const getuser = async ()=>{\r\n    const response = await fetch(`${host}/api/auth/getuser`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Auth': auth\r\n      },\r\n      \r\n    });\r\n    const json = await response.json();\r\n    setname(json.name)\r\n\r\n  }\r\n\r\n  return (\r\n    <NoteContext.Provider value={{ notes, addNote, deleteNote, editNote, getNote,isAuthenticated,getuser,name }}>\r\n      {props.children}\r\n    </NoteContext.Provider>\r\n  );\r\n};\r\n\r\nexport default NoteState;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}